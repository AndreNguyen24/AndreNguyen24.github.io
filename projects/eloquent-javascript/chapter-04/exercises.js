////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(num1, num2, step) {
 let rangeArray = [];
 if (step === undefined) {
   step = 1;
 }
 if (num1 === num2) {
   return rangeArray;
 }
 if (num1 < num2 && step > 0) {
   for (let i = num1; i <= num2; i += step) {
     rangeArray.push(i);
   }
 }
 if (num1 > num2 && step > 0) {
   for (let j = num1; j >= num2; j -= step) {
     rangeArray.puush(j);
   }
 }
 if (step < 0) {
   return [];
 }
 return rangeArray;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(arr) {
   if (!arr.length) {
   return 0;
 }
 let number = 0;
 for (let i = 0; i < arr.length; i++) {
   number += arr[i];
 }
 return number;

}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
   const result = [];
 for (let i = arr.length - 1; i >= 0; i--) {
   result.push(arr[i]);
 }
 return result;

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
for (let i = 0; i < Math.floor(array.length / 2); i++) {
  let old = array[i];
  array[i] = array[array.length - 1 - i];
  array[array.length - 1 - i] = old;
}
return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
 let list = {};
 for (let i = array.length - 1; i >= 0; i--) {
   if (i === array.length - 1) {
 list.value = array[i];
 list.rest = null;
 } else {
   list = {value: array[i], rest: list}
 }
 }
 return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
 let arr = [];
 for (let node = list; node; node = node.rest) {
   arr.push(node.value);
 }
 return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(elem, list) {
  return {value: elem, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, index) {
   if (index < 0) return;
 let counter = 0;
 for (let i = list; i; i = i.rest) {
   if (counter === index) {
     return i.value;
   }
   counter++;
 }

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
   if (x === y) {
   return true;
 }
 else if ((typeof x == 'object' && x != null) && (typeof y == 'object' && y != null)) {
   if (Object.keys(x).length != Object.keys(y).length)
   return false;
   for (var prop in x) {
     if (y.hasOwnProperty(prop)) {
       if (! deepEqual(x[prop], y[prop]))
       return false;
     }
     else
     return false;
   }
   return true;
 }
 else
 return false;

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
